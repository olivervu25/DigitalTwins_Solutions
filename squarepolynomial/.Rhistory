plot(data1, col = viridis(10), breaks = brk, main = "Invasive plant in Minnesota")
data1 <- raster("invasive_plant_rasters_2019/sumrast_allassumptions.avg_Tanacetum vulgare.tif")
brk <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
plot(data1, col = viridis(10), breaks = brk, main = "Invasive plant in Minnesota")
data1 <- raster("invasive_plant_rasters_2019/sumrast_allassumptions.avg_Tanacetum vulgare.tif")
brk <- c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
plot(data1, col = viridis(10), breaks = brk, main = "Invasive plant in Minnesota")
data1 <- raster("invasive_plant_rasters_2019/sumrast_allassumptions.avg_Tanacetum vulgare.tif")
brk <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
plot(data1, col = viridis(11), breaks = brk, main = "Invasive plant in Minnesota")
data1 <- raster("invasive_plant_rasters_2019/sumrast_allassumptions.avg_Tanacetum vulgare.tif")
brk <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
col <- viridis(11)
plot(data1, col = col, breaks = brk, main = "Seocnd invasive plant in Minnesota")
data <- raster("invasive_plant_rasters_2019/sumrast_allassumptions.avg_Cirsium arvense.tif")
brk <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
col = viridis(10)
plot(data, col = col, breaks = brk, main = "First invasive plant in Minnesota")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("maptools")
#install.packages("rgeos")
#install.packages("cowplot")
#install.packages("lwgeom")
#install.packages("cartogram")
#install.packages("raster")
library(lwgeom)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(hrbrthemes)
library(magrittr)
library(sf)
library(dplyr)
library(tidytuesdayR)
library(network)
library(igraph)
library(maps)
library(maptools)
library(rgeos)
library(ggspatial)
library(ggrepel)
library(rnaturalearth)
library(rnaturalearthdata)
library(cowplot)
library(cartogram)
library(viridis)
library(rgdal)
library(raster)
library(sp)
library(reshape2)
ggplot(dataset, aes(Height)) +
geom_histogram() + labs(title = "The average pay of male and female workers in top universities in the US",
caption = "Data source: Github")
dataset <- trees
names(dataset) <- c("Girth", "Height", "Volume")
ggplot(dataset, aes(Height)) +
geom_histogram() + labs(title = "The average pay of male and female workers in top universities in the US",
caption = "Data source: Github")
ggplot(dataset, aes(Height)) +
geom_histogram() + labs(title = "The average pay of male and female workers in top universities in the US",
caption = "Data source: Github") + theme_bw()
ggplot(dataset, aes(Height)) +
geom_histogram() + labs(title = "Height of trees") + theme_bw()
ggplot(dataset, aes(Height)) +
geom_histogram() + labs(title = "Height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram() + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height, color = "green")) +
geom_histogram() + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(color = green) + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(color = "green") + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "green") + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "green", color = NULL) + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "green", color = "white") + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "green", color = "green") + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "#5ed0d4", color = "#5ed0d4") + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "#5ed0d4", color = "#5ed0d4") + labs(title = "Histogram of height of trees") + theme_minimal() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "#365c8d", color = "#365c8d") + labs(title = "Histogram of height of trees") + theme_minimal() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "#365c8d", color = "#365c8d") + labs(title = "Histogram of height of trees") + theme_classic() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "#365c8d", color = "#365c8d") + labs(title = "Histogram of height of trees") + theme_clean() + theme(plot.title = element_text(hjust = 0.5))
ggplot(dataset, aes(Height)) +
geom_histogram(fill = "#365c8d", color = "#365c8d") + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
sa2_area <- st_read("SA2_2016_AUST.shx")
library(dplyr)
library(dplyr)
library(ggplot2)
library(sf)
library(sf)
library(ggrepel)
load(file="SIR_PHN_data.Rdata")
load(file="EHR_PHN_data.Rdata")
head(SIR_PHN_data)
sa2_area <- st_read("SA2_2016_AUST.shx")
```{r}
sa2_area <- st_read("SA2_2016_AUST.shx")
sa2_area <- st_read("SA2_2016_AUST.dbf")
getwd()
geom_histogram(fill = "#365c8d", color = "#365c8d") + labs(title = "Histogram of height of trees") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
install.packages("RSQLiteAdmin")
install.packages("RSQLiteAdmin")
library(RSQLiteAdmin)
install.packages("RSQLiteAdmin")
library(RSQLiteAdmin)
install.packages("rsqliteadmin")
install.packages("rsqliteadmin")
install.packages("rsqliteadmin")
install.packages("rsqliteadmin")
library(RSQLiteAdmin)
library(rsqliteadmin)
rsqliteadmin::run_rsqliteadmin()
> devtools::install()
devtools::install()
library(leaflet)
library(leaflet)
library(leaflet)
library(dplyr)
# Load the stock data
stock_data <- read.csv("combined_stock_data.csv")
# Filter out rows with missing values
stock_data <- stock_data %>% filter(!is.na(Google) & !is.na(Meta))
# Create a leaflet map
leaflet(stock_data) %>%
addTiles() %>%
addMarkers(~Meta, ~Google, popup = ~paste("Date: ", Date, "<br>Meta: ", round(Meta, 2), "<br>Google: ", round(Google, 2)))
# Load the airquality dataset
data(airquality)
# Create a map centered on New York City
nyc_coords <- c(40.7128, -74.0060)
# Load the airquality dataset
data(airquality)
# Create a map centered on New York City
nyc_coords <- c(40.7128, -74.0060)
map <- leaflet() %>%
setView(lng = nyc_coords[2], lat = nyc_coords[1], zoom = 10)
# Add a tile layer for the base map
map %>% addTiles()
# Add a marker for each observation in the airquality dataset
map %>% addMarkers(data = airquality,
lng = ~Ozone, lat = ~Wind)
library(leaflet)
library(dplyr)
airquality$Ozone
# Add a marker for each observation in the airquality dataset
map %>% addMarkers(data = airquality,
lng = ~Ozone, lat = ~Wind)
# Load example data
data(quakes)
# Create leaflet map
leaflet(quakes) %>%
addTiles() %>%
addMarkers()
# Load airquality data
data(airquality)
# Create a time series map
leaflet(airquality) %>%
addTiles() %>%
addCircleMarkers(
lat = ~lat, # use "lat" column for latitude
lng = ~lon, # use "lon" column for longitude
radius = ~Wind*5, # use "Wind" column to adjust the size of markers
color = "red", # set marker color
stroke = FALSE, # remove marker border
fillOpacity = 0.7, # set marker opacity
popup = ~paste("Wind speed: ", Wind, "mph") # display Wind speed in popup
)
# Create a time series map
leaflet(airquality) %>%
addTiles() %>%
addCircleMarkers(
lat = ~lat, # use "lat" column for latitude
lng = ~lon, # use "lon" column for longitude
radius = ~Wind*5, # use "Wind" column to adjust the size of markers
color = "red", # set marker color
stroke = FALSE, # remove marker border
fillOpacity = 0.7, # set marker opacity
popup = ~paste("Wind speed: ", Wind, "mph") # display Wind speed in popup
)
# Create a time series map
leaflet(airquality) %>%
addTiles() %>%
addCircleMarkers(
lat = ~lat, # use "lat" column for latitude
lng = ~long, # use "lon" column for longitude
radius = ~Wind*5, # use "Wind" column to adjust the size of markers
color = "red", # set marker color
stroke = FALSE, # remove marker border
fillOpacity = 0.7, # set marker opacity
popup = ~paste("Wind speed: ", Wind, "mph") # display Wind speed in popup
)
airquality
# Create leaflet map
leaflet(airquality) %>%
addTiles() %>%
addMarkers(
lat = ~Month, # use "Month" column for latitude
lng = ~Temp, # use "Temp" column for longitude
popup = ~paste("Month: ", Month, "<br>", "Temperature: ", Temp, "F") # display Month and Temperature in popup
)
library(leaflet)
library(dplyr)
df2 <- read.table(header = T, text = '
latitude	longitude	Flat	Land	Office
42.85	-2.6727	5	22	25
38.3452	-0.4815	2	24	25
38.161	-0.8013	5	17	11
38.1631	-0.8115	5	22	24
38.1673	-0.8034	5	15	13
38.1776	-0.7973	5	21	16
37.9787	-0.6822	2	11	16
38.2622	-0.7011	61	24	16
39.9333	-0.1	0	14	13
38.0848	-0.944	0	21	21
38.125	-0.8782	3	18	14
38.1339	-0.8624	3	12	15
38.1518	-0.8308	3	21	20
38.6253	-0.5722	3	14	14
')
leaflet(df2) %>%
addTiles() %>%
addMarkers(lat = ~latitude, lng = ~longitude,
clusterOptions = markerClusterOptions(zoomToBoundsOnClick = T),
popup = ~paste(
paste('<b>', 'Flat:', '</b>', Flat),
paste('<b>',  'Land:', '</b>', Land),
paste('<b>', 'Office:', Office),
sep = '<br/>'),
popupOptions = popupOptions(closeButton = FALSE)
)
# Load example data
data(quakes)
# Convert time column to POSIXct format
quakes$time <- as.POSIXct(paste(quakes$time, "00", sep = " "), tz = "UTC")
# Convert time column to POSIXct format
quakes$time <- as.POSIXct(paste(quakes$time, "00", sep = " "), tz = "UTC")
# Create leaflet map
m <- leaflet(quakes) %>%
addTiles() %>%
addMarkers() %>%
addTimeDimension(
options = timeDimensionOptions(
autoPlay = TRUE,
timeSliderDragUpdate = TRUE,
loopButton = TRUE,
timeZones = "UTC",
playerOptions = playerOptions(
loop = TRUE,
transitionTime = 200,
startOver = TRUE
)
),
times = ~time
)
# Convert time column to POSIXct format
quakes$time <- as.POSIXct(paste(quakes$time, "00", sep = " "), tz = "UTC")
library(leaflet)
library(leaflet.extras)
library(RColorBrewer)
library(lubridate)
install.packages("leaflet.extras")
library(leaflet.extras)
# Load data
data(quakes)
# Convert time to POSIXct format
quakes$time <- ymd_hms(paste(quakes$time, "00"))
# Create TimeDimension layer
td <- td_geojson(quakes, options = td_options(minDate = min(quakes$time),
maxDate = max(quakes$time),
timeField = "time"))
library(leaflet)
library(leaflet.extras)
library(RColorBrewer)
library(lubridate)
# Load data
data(quakes)
# Convert time to POSIXct format
quakes$time <- ymd_hms(paste(quakes$time, "00"))
# Create TimeDimension layer
td <- td_geojson(quakes, options = td_options(minDate = min(quakes$time),
maxDate = max(quakes$time),
timeField = "time"))
library(leaflet)
library(leaflet.extras)
library(RColorBrewer)
library(lubridate)
ui <- fluidPage(
leafletOutput("map"),
sliderInput("slider", "Time:", min = as.Date("2015-01-01"), max = as.Date("2015-12-31"), value = as.Date("2015-01-01"), step = 1, sep = "")
)
# Define server
server <- function(input, output, session) {
# Load data
data(quakes)
# Convert date to POSIXct format
quakes$datetime <- as.POSIXct(paste(quakes$Date, quakes$Time))
# Define the time dimension layer
td_layer <- td_geojson(quakes, options = td_options(minDate = as.Date("2015-01-01"), maxDate = as.Date("2015-12-31"), timeField = "datetime"))
# Create the map
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -120, lat = 45, zoom = 4) %>%
addTimedDimension(td_layer) %>%
addLegend("bottomright", title = "Magnitude", colors = "red", labels = "Magnitude") %>%
addSliderControl(inputId = "slider", position = "bottomleft", label = "Time")
})
}
ui <- fluidPage(
leafletOutput("map"),
sliderInput("slider", "Time:", min = as.Date("2015-01-01"), max = as.Date("2015-12-31"), value = as.Date("2015-01-01"), step = 1, sep = "")
)
library(shiny)
ui <- fluidPage(
leafletOutput("map"),
sliderInput("slider", "Time:", min = as.Date("2015-01-01"), max = as.Date("2015-12-31"), value = as.Date("2015-01-01"), step = 1, sep = "")
)
# Define server
server <- function(input, output, session) {
# Load data
data(quakes)
# Convert date to POSIXct format
quakes$datetime <- as.POSIXct(paste(quakes$Date, quakes$Time))
# Define the time dimension layer
td_layer <- td_geojson(quakes, options = td_options(minDate = as.Date("2015-01-01"), maxDate = as.Date("2015-12-31"), timeField = "datetime"))
# Create the map
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lng = -120, lat = 45, zoom = 4) %>%
addTimedDimension(td_layer) %>%
addLegend("bottomright", title = "Magnitude", colors = "red", labels = "Magnitude") %>%
addSliderControl(inputId = "slider", position = "bottomleft", label = "Time")
})
}
# Run the app
shinyApp(ui, server)
library(leaflet)
library(leaflet.extras)
library(RColorBrewer)
library(lubridate)
library(shiny)
library(shiny)
library(leaflet)
library(RColorBrewer)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
if (d < 0) {
return(NULL)
} else if (d == 0) {
return(-b / (2*a))
} else {
return(c((-b + sqrt(d)) / (2*a), (-b - sqrt(d)) / (2*a)))
}
# function to find roots of a quadratic equation
find_roots <- function(a, b, c) {
d <- b^2 - 4*a*c
if (d < 0) {
return(NULL)
} else if (d == 0) {
return(-b / (2*a))
} else {
return(c((-b + sqrt(d)) / (2*a), (-b - sqrt(d)) / (2*a)))
}
}
# function to find the minimum value of a quadratic function
find_min <- function(a, b, c) {
if (a > 0) {
return(-(b / (2*a)))
} else {
return(Inf)
}
}
# function to find the maximum value of a quadratic function
find_max <- function(a, b, c) {
if (a < 0) {
return(-(b / (2*a)))
} else {
return(Inf)
}
}
# function to visualize the quadratic function
visualize <- function(a, b, c) {
x <- seq(-10, 10, length.out = 100)
y <- a*x^2 + b*x + c
plot(x, y, type = "l", xlab = "x", ylab = "y")
}
# function to get the value of y for a given value of x
get_y <- function(a, b, c, x) {
return(a*x^2 + b*x + c)
}
# function to get the value of y for a given value of x
get_y <- function(a, b, c, x) {
return(a*x^2 + b*x + c)
}
visualize(1,2,1)
get_y(1,2,1,1)
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
fig.align = "center",
out.width = "80%",
cache = TRUE
)
find_min <- function(a, b, c) {
if (a > 0) {
return(c - (b^2) / (4 * a))
} else {
return(NA)
}
}
find_min(1,2,1)
find_min(1,2,2)
find_min(1,2,4)
find_max(-1,2,-4)
visualize(-1,2,-4)
find_max(-1,2,-4)
find_max(-1,2,-4)
find_max(-1,2,-4)
find_max <- function(a, b, c) {
if (a < 0) {
return(c - (b^2) / (4 * a))
} else {
return(NA)
}
}
find_max(-1,2,-4)
return(a*x^2 + b*x + c)
return(a*x^2 + b*x + c)
# function to get the value of y for a given value of x
get_y <- function(a, b, c, x) {
return(a*x^2 + b*x + c)
}
poly <- c(1, -3, 2)
# Find the value of the polynomial at x = 2
get_y(poly, 2)
# Find the value of the polynomial at x = 2
get_y(poly, 2)
package.skeleton("square_polynomial")
package.skeleton("square_polynomial")
getwd
getwd()
setwd("Documents")
setwd("GSoC_Digital_Twins")
setwd("square_polynomial")
R CMD build
devtools::create("mypackage")
